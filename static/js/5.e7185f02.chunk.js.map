{"version":3,"sources":["components/Users/User/UserStyles.ts","components/Users/User/User.tsx","components/Users/FilterUsersBar/FilterUsersBar.tsx","components/Users/Users.tsx"],"names":["useStyles","makeStyles","containerGrid","marginTop","paper","padding","width","button","background","color","userPhoto","userName","textAlign","User","user","followingInProgress","toggleFollowingUser","classes","Grid","container","direction","justify","className","Paper","to","id","alt","src","photos","small","Typography","noWrap","name","Button","fullWidth","disabled","some","onClick","followed","filterUsersBarValidation","value","FilterUsersBar","handleFilterSubmit","filter","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","filterBoolean","isSubmitting","spacing","item","type","placeholder","as","Users","React","memo","dispatch","useDispatch","pageSize","useSelector","getPageSize","totalUsersCount","getTotalUsersCount","currentPage","getCurrentPage","getFilter","users","getUsers","isFetching","getIsFetching","getFollowingInProgress","toggleFollowingUsers","userId","history","useHistory","useEffect","parse","queryString","location","search","substr","actualPage","actualFilter","page","Number","getUsersWithFilter","push","pathname","alignItems","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","pageNumber","handlePageChange","itemClass","linkClass","map","xs","sm","md","UsersPage","withAuthRedirect"],"mappings":"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","file":"static/js/5.e7185f02.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    containerGrid:{\r\n        marginTop: '12px',\r\n    },\r\n    paper:{\r\n        padding: '15px',\r\n        width: '100%'\r\n    },\r\n    button:{\r\n        background: 'linear-gradient(45deg, gray, #2d2d2d)',\r\n        color: 'white',\r\n        marginTop: '15px'\r\n    },\r\n    userPhoto:{\r\n        width: '100%'\r\n    },\r\n    userName:{\r\n        marginTop: '15px',\r\n        textAlign: 'center'\r\n    }\r\n});","import React from 'react';\r\nimport userPhoto from \"../../../assets/images/avatar.png\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UsersType } from '../../../redux/users-reducer'\r\nimport { Button, Grid, Paper } from '@material-ui/core';\r\nimport { useStyles } from './UserStyles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    toggleFollowingUser: (userId: number, followed: boolean) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user , followingInProgress, toggleFollowingUser}) => {\r\n\r\n    const classes = useStyles()\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" className={classes.containerGrid}>\r\n        <Paper className={classes.paper}>\r\n            <div>\r\n                <NavLink to={\"/profile/\" + user.id}>\r\n                    <img alt=\"small avatar\" className={classes.userPhoto}\r\n                        src={user.photos.small !== null ? user.photos.small : userPhoto} />\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <Typography noWrap className={classes.userName}>{user.name}</Typography>\r\n                {/* <div>{\"u.location.country\"}</div>\r\n            <div>{\"u.location.city\"}</div> */}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    className={classes.button}\r\n                    fullWidth\r\n                    disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => { toggleFollowingUser(user.id, user.followed) }}\r\n                >\r\n                    {user.followed ? \"Unfollow\" : \"Follow\"}\r\n                </Button>\r\n            </div>\r\n        </Paper>\r\n        </Grid>\r\n    \r\n    )\r\n\r\n}\r\n\r\nexport default User","import { Grid } from '@material-ui/core';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport React from 'react'\r\nimport { FilterType } from '../../../redux/users-reducer';\r\n\r\n\r\nconst filterUsersBarValidation = (value: any) => {\r\n\r\n}\r\n\r\nconst FilterUsersBar: React.FC<PropsType> = ({handleFilterSubmit, filter}) => {\r\n\r\n    const submit = (values: FormValuesType , { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n\r\n        //object to convert string values into boolean in values.friend\r\n        const filterBoolean: FilterType  = {\r\n            term: values.term,\r\n            friend: values.friend === 'false' ? false : values.friend === 'true' ? true : null\r\n        }\r\n\r\n        //function execute getUsersWithFilter thunk \r\n        handleFilterSubmit(filterBoolean)\r\n        setSubmitting(false);       \r\n    }\r\n    return (<Formik\r\n        initialValues={{ term: filter.term, friend: String(filter.friend) as Friend }}\r\n        validate={filterUsersBarValidation}\r\n        onSubmit={submit}\r\n    >\r\n        {({ isSubmitting }) => (\r\n            <Form>\r\n                <Grid container direction=\"row\" spacing={2} justify=\"center\">\r\n                    <Grid item>\r\n                        <Field type='text' name='term' placeholder=\"Provide filter query\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Field as='select' name='friend' >\r\n                            <option value=\"null\">All users</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Submit\r\n                        </button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n            \r\n        )}\r\n    </Formik>)\r\n\r\n}\r\n\r\nexport default FilterUsersBar\r\n\r\ntype PropsType = {\r\n    handleFilterSubmit: (filter: FilterType) => void\r\n    filter: FilterType\r\n}\r\n\r\ntype Friend = \"true\" | \"null\" | \"false\"\r\ntype FormValuesType = {\r\n    term: string\r\n    friend: Friend\r\n}","import React, { useEffect } from 'react';\r\n//import styles from './UsersPage.module.css';\r\nimport Pagination from 'react-js-pagination'\r\nimport User from './User/User';\r\nimport { FilterType, handlePageChange, getUsersWithFilter, toggleFollowingUser } from '../../redux/users-reducer';\r\nimport FilterUsersBar from './FilterUsersBar/FilterUsersBar';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getFilter,\r\n    getUsers,\r\n    getIsFetching,\r\n    getFollowingInProgress\r\n} from '../../redux/selectors/usersSelectors';\r\nimport Loader from '../commonElements/loader/loader';\r\nimport withAuthRedirect from '../../HightOrderComponent(hoc)/withAuthRedirect';\r\nimport { useHistory } from 'react-router';\r\nimport * as queryString from 'querystring'\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nlet Users: React.FC =React.memo( () => {\r\n\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const pageSize = useSelector(getPageSize)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const filter = useSelector(getFilter)\r\n    const users = useSelector(getUsers)\r\n    const isFetching = useSelector(getIsFetching)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const handleFilterSubmit = (filter: FilterType) => {\r\n        dispatch(getUsersWithFilter(1, pageSize, filter))\r\n    }\r\n    const onPageChange = (pageNumber: number): void =>{\r\n        dispatch(handlePageChange(pageNumber, pageSize, filter))\r\n    }\r\n    const toggleFollowingUsers = (userId: number, followed: boolean) =>{\r\n        dispatch(toggleFollowingUser(userId, followed))\r\n    }\r\n\r\n    //useHistory same as withRouter HOC. It`s gat data from URL\r\n    const history = useHistory()\r\n\r\n    //get users for first page\r\n    useEffect(() => {\r\n\r\n        //parse string(make an object) from url(without ? on the begin substr delete it)\r\n        const parse = queryString.parse(history.location.search.substr(1))\r\n        // parse = {\r\n        //     term: '',\r\n        //     friend: 'true' | 'false' | 'null'\r\n        //     page: number\r\n        // }\r\n\r\n        //start actual data\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        //if url come not empty change our actual data onto data from url query\r\n        if (!!parse.page) actualPage = Number(parse.page)\r\n        if (!!parse.term) actualFilter = {...actualFilter, term: parse.term as string }\r\n        if (!!parse.friend) actualFilter = \r\n            {...actualFilter, friend: parse.friend === \"true\" ? true : parse.friend === \"false\" ? false: null}\r\n        \r\n        //dispatch getUsersWithFilter thunk already with actual data from url\r\n        dispatch(getUsersWithFilter(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    //synchronization of url depends on filter data\r\n    useEffect ( ()=> {\r\n\r\n        //push filter data into url\r\n        history.push({\r\n            pathname: '/users',\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    return (\r\n        isFetching\r\n            ? <Loader />\r\n            :\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                    <Pagination\r\n                        activePage={currentPage}\r\n                        itemsCountPerPage={pageSize}\r\n                        totalItemsCount={totalUsersCount}\r\n                        pageRangeDisplayed={5}\r\n                        onChange={onPageChange}\r\n                        itemClass=\"page-item\"\r\n                        linkClass=\"page-link\"\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <FilterUsersBar handleFilterSubmit={handleFilterSubmit} filter={filter} />\r\n                </Grid>\r\n                <Grid item container direction='row' alignItems=\"center\" spacing={2}>\r\n                    {users.map(user =>\r\n                        <Grid item xs={12} sm={6} md={4} justify=\"center\">\r\n                        <User key={user.id} user={user}\r\n                            toggleFollowingUser={toggleFollowingUsers} followingInProgress={followingInProgress} />\r\n                        </Grid>\r\n                        )}\r\n                </Grid>\r\n            </Grid>\r\n    );\r\n})\r\n\r\nconst UsersPage = withAuthRedirect(Users)\r\nexport default UsersPage\r\n\r\n"],"sourceRoot":""}