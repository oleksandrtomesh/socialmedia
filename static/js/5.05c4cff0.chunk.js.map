{"version":3,"sources":["components/ChatPage/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageFormChat","React","memo","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","Message","id","ref","console","log","src","photo","avatar","width","userName","setMessage","onChange","target","value","disabled","onClick","sendMessage","withAuthRedirect"],"mappings":"oLAuBMA,EAAgB,WAClB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKH,UAS9D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEf,IAEM,gCACY,UAAXN,GAAsB,8EACvB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAMVD,EAAqBE,IAAMC,MAAK,WAElC,IAAMC,EAAWV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YAC3DC,EAAoBC,iBAAuB,MAHT,EAIAC,oBAAkB,GAJlB,mBAIjCC,EAJiC,KAInBC,EAJmB,KA0BxC,OARAZ,qBAAU,WACY,IAAD,EAAbW,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAG3D,CAACR,IAIC,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,UAAWC,SAnBlC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAiB,IAcrC,UACKL,EAASqB,KAAI,SAACC,GAAD,OAA8B,cAACC,EAAD,CAA0BD,QAASA,GAArBA,EAAQE,OAClE,qBAAKC,IAAKxB,UAMhBsB,EAAgDzB,IAAMC,MAAK,YAAgB,IAAduB,EAAa,EAAbA,QAE/D,OADAI,QAAQC,IAAI,gBAER,gCACI,qBAAKC,IAAKN,EAAQO,MAAQP,EAAQO,MAAOC,IAAQrB,MAAO,CAAEsB,MAAO,UADrE,IACgF,4BAAIT,EAAQU,WACxF,uBACCV,EAAQA,QACT,6BAMNzB,EAA8B,WAAO,IAAD,EAEZM,mBAAS,IAFG,mBAEnCmB,EAFmC,KAE1BW,EAF0B,KAIpC5C,GADWD,cACFE,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKH,WAU1D,OACI,mCACI,gCACI,0BAAU6C,SAAU,SAACrB,GAAD,OAAOoB,EAAWpB,EAAEsB,OAAOC,QAAQA,MAAOd,IAC9D,wBAAQe,SAAqB,UAAXhD,EAAoBiD,QAZ3B,WACnBhB,IAGJiB,YAAYjB,GACZW,EAAW,MAOC,wBAMDO,uBArGY,WAEvB,OAAO,mCACP,cAACtD,EAAD","file":"static/js/5.05c4cff0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport withAuthRedirect from '../../HightOrderComponent(hoc)/withAuthRedirect'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport avatar from '../../assets/images/avatar.png';\r\n\r\nexport type ChatMessageType =  {\r\n    id: string\r\n    message: string\r\n    photo:  string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return(<>\r\n    <Chat/>\r\n    </>\r\n    )\r\n}\r\n\r\nconst Chat:React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType)=> state.chat.status)\r\n\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        } \r\n    },[])\r\n\r\n    return (<div>\r\n            {status === 'error' && <div>Some error ocurred. Please refresh tha page</div>}\r\n            <>\r\n                <Messages />\r\n                <AddMessageFormChat />\r\n            </>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = React.memo(() => {\r\n\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)  \r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n\r\n    //do auto-scroll if user only near the bottom or at the \r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll (false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll){\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n        \r\n    },[messages])\r\n\r\n    \r\n    return(\r\n        <div style={{height: \"500px\", overflowY: \"scroll\"}} onScroll={scrollHandler}>\r\n            {messages.map((message: ChatMessageType) => <Message key={message.id} message={message}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//Message component\r\nconst Message: React.FC<{message: ChatMessageType}> = React.memo(({message}) => {\r\n    console.log('>>>>>message')\r\n    return(\r\n        <div>\r\n            <img src={message.photo ? message.photo: avatar} style={{ width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\n//AddMessageFormChat component\r\nconst AddMessageFormChat:React.FC = () => {\r\n\r\nconst [message, setMessage] = useState('')\r\nconst dispatch = useDispatch()\r\nconst status = useSelector((state: AppStateType)=> state.chat.status)\r\n\r\nconst sendMessageHandler = () => {\r\n    if(!message){\r\n        return;\r\n    }\r\n    sendMessage(message)\r\n    setMessage('')\r\n}\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.target.value)} value={message}></textarea>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(ChatPage);"],"sourceRoot":""}