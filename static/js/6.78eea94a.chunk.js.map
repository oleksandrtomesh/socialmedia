{"version":3,"sources":["HightOrderComponent(hoc)/withAuthRedirect.tsx","components/Users/User/UsersPage.module.css","components/Users/UsersPage.module.css","components/Users/User/User.tsx","components/Users/FilterUsersBar/FilterUsersBar.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","authorization","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","User","user","followingInProgress","toggleFollowingUser","className","styles","item","avatarButton","id","alt","profileImg","src","photos","small","userPhoto","Button","type","variant","disabled","some","onClick","followed","name","status","filterUsersBarValidation","value","FilterUsersBar","handleFilterSubmit","term","initialValues","friend","validate","onSubmit","values","setSubmitting","filter","isSubmitting","placeholder","as","Users","pageSize","totalUsersCount","currentPage","users","handlePageChange","pagination","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","pageNumber","itemClass","linkClass","filterUsersBar","map","UsersPage","componentDidMount","getUsers","render","isFetching","selectPage","userReducerActionsCreators","connector","usersPage","getUsersWithFilter","compose"],"mappings":"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","file":"static/js/6.78eea94a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect} from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n//state for HOC withAuthRedirect\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>{\r\n    return {\r\n        isAuth: state.authorization.isAuth\r\n    }\r\n}\r\n\r\ntype MSTPtype = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst withAuthRedirect = <P extends object>(Component: React.ComponentType<P>) => {\r\n\r\n    class RedirectComponent extends React.Component<MSTPtype>{\r\n        render(){\r\n            const {isAuth, ...props} = this.props\r\n            return !isAuth ? <Redirect to=\"/login\"/>: <Component {...props as P} />\r\n        }\r\n    }\r\n    \r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    //return component already with redirect\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"UsersPage_item__2M5xp\",\"avatarButton\":\"UsersPage_avatarButton__3QkLA\",\"profileImg\":\"UsersPage_profileImg__31-bS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"UsersPage_pagination__Vzt88\",\"filterUsersBar\":\"UsersPage_filterUsersBar__33s0M\"};","import React from 'react';\r\nimport styles from './UsersPage.module.css';\r\nimport userPhoto from \"../../../assets/images/avatar.png\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button'\r\nimport { UsersType } from '../../../redux/users-reducer'\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    toggleFollowingUser: (userId: number, followed: boolean) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user , followingInProgress, toggleFollowingUser}) => {\r\n\r\n    return (\r\n    <div className={styles.item}>\r\n        <div className={styles.avatarButton}>\r\n            <div>\r\n                <NavLink to={\"/profile/\" + user.id}>\r\n                    <img alt=\"small avatar\" className={styles.profileImg}\r\n                        src={user.photos.small !== null ? user.photos.small : userPhoto} />\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <Button type=\"submit\" variant=\"dark\" \r\n                    disabled={followingInProgress.some(id => id === user.id)} \r\n                    onClick={() => {toggleFollowingUser(user.id, user.followed)}}\r\n                >\r\n                    {user.followed ? \"Unfollow\" : \"Follow\"}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n            {/* <div>{\"u.location.country\"}</div>\r\n            <div>{\"u.location.city\"}</div> */}\r\n        </div>\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default User","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react'\r\nimport { FilterType } from '../../../redux/users-reducer';\r\n\r\n\r\nconst filterUsersBarValidation = (value: any) => {\r\n\r\n}\r\n\r\nconst FilterUsersBar: React.FC<PropsType> = ({handleFilterSubmit, term}) => {\r\n\r\n    const submit = (values: FormValuesType , { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n\r\n        //object to convert string values into boolean in values.friend\r\n        const filter:FilterType  = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n\r\n        }\r\n\r\n        //function execute getUsersWithFilter thunk \r\n        handleFilterSubmit(filter)\r\n        setSubmitting(false);       \r\n    }\r\n    return (<Formik\r\n        initialValues={{ term: term, friend: null }}\r\n        validate={filterUsersBarValidation}\r\n        onSubmit={submit}\r\n    >\r\n        {({ isSubmitting }) => (\r\n            <Form>\r\n                <Field type='text' name='term' placeholder=\"Provide filter query\" />\r\n                <Field as='select' name='friend' >\r\n                    <option value=\"null\">All users</option>\r\n                    <option value=\"true\">Only followed</option>\r\n                    <option value=\"false\">Only unfollowed</option>\r\n                </Field>\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                    Submit\r\n                </button>\r\n            </Form>\r\n        )}\r\n    </Formik>)\r\n\r\n}\r\n\r\nexport default FilterUsersBar\r\n\r\ntype PropsType = {\r\n    handleFilterSubmit: (filter: FilterType) => void\r\n    term: string\r\n}\r\n\r\ntype FormValuesType = {\r\n    term: string\r\n    friend: \"true\" | \"null\" | \"false\" | null\r\n}","import React from 'react';\r\n//import styles from './UsersPage.module.css';\r\nimport Pagination from 'react-js-pagination'\r\nimport User from './User/User';\r\nimport styles from './UsersPage.module.css'\r\nimport { FilterType, UsersType } from '../../redux/users-reducer';\r\nimport FilterUsersBar from './FilterUsersBar/FilterUsersBar';\r\n\r\n\r\nlet Users: React.FC<PropsType> = ({pageSize, totalUsersCount, currentPage, term, users, handlePageChange,  handleFilterSubmit, ...props}) => {\r\n\r\n    const onPageChange = (pageNumber: number): void =>{\r\n        handlePageChange(pageNumber, pageSize);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <div className={styles.pagination}>\r\n            <Pagination\r\n                activePage={currentPage}\r\n                itemsCountPerPage={pageSize}\r\n                totalItemsCount={totalUsersCount}\r\n                pageRangeDisplayed={5}\r\n                onChange={onPageChange}\r\n                itemClass=\"page-item\"\r\n                linkClass=\"page-link\"\r\n            />\r\n            </div>\r\n            <div className={styles.filterUsersBar}>\r\n                <FilterUsersBar handleFilterSubmit={handleFilterSubmit} term={term}/>\r\n            </div>\r\n            {users.map(user => <User key={user.id} user={user}  {...props}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Users\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    term: string\r\n    toggleFollowingUser: (userId: number, followed: boolean) => void\r\n    handlePageChange: (pageNumber:number, pageSize: number) => void\r\n    handleFilterSubmit: (filter: FilterType) => void\r\n}","import React from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport {\r\n    userReducerActionsCreators,\r\n    getUsersWithFilter,\r\n    toggleFollowingUser,\r\n    handlePageChange,\r\n    FilterType\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Loader from '../commonElements/loader/loader';\r\nimport { compose } from 'redux';\r\nimport withAuthRedirect from '../../HightOrderComponent(hoc)/withAuthRedirect';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\nclass UsersPage extends React.Component<PropsType> {\r\n\r\n    componentDidMount = () => {\r\n        //get users for page 1\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n    \r\n    handleFilterSubmit = (filter: FilterType) => {\r\n        this.props.getUsers(1, this.props.pageSize, filter)\r\n    }\r\n\r\n    render = () => {\r\n        \r\n        return (\r\n            <div>\r\n                {this.props.isFetching \r\n                ? <Loader /> \r\n                : <Users \r\n                    handleFilterSubmit={this.handleFilterSubmit}\r\n                    {...this.props}\r\n                    />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        isAuth: state.authorization.isAuth,\r\n        term: state.usersPage.filter.term\r\n    };\r\n};\r\n\r\nconst selectPage = userReducerActionsCreators.selectPage\r\n\r\nconst connector = connect (mapStateToProps, { selectPage, getUsers: getUsersWithFilter, toggleFollowingUser, handlePageChange})\r\n\r\nexport default compose(\r\n    connector,\r\n    withAuthRedirect\r\n)(UsersPage) as React.ComponentType;\r\n\r\ntype PropsFromRedux = ConnectedProps <typeof connector>\r\ntype PropsType = PropsFromRedux"],"sourceRoot":""}