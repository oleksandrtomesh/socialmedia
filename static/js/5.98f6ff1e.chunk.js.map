{"version":3,"sources":["components/ChatPage/ChatPage.tsx"],"names":["Chat","useState","webSocketChanel","setWebSocketChanel","useEffect","wsChanel","closeHandler","console","log","setTimeout","createWsChanel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageFormChat","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","message","index","Message","src","photo","width","userName","setMessage","wsStatus","setWsStatus","openHandler","onChange","target","value","disabled","onClick","send","ChatPage"],"mappings":"mJAiBMA,EAAgB,WAAO,IAAD,EACsBC,mBAA2B,MADjD,mBACjBC,EADiB,KACAC,EADA,KAgCxB,OA7BAC,qBAAU,WAEN,IAAIC,EAGEC,EAAe,WACjBC,QAAQC,IAAI,aACZC,WAAWC,EAAgB,MAI/B,SAASA,IAAmB,IAAD,IAEf,QAAR,EAAAL,SAAA,SAAUM,oBAAoB,QAASL,GAC/B,QAAR,EAAAD,SAAA,SAAUO,SAEVP,EAAW,IAAIQ,UAAU,iEAChBC,iBAAkB,QAASR,GAEpCH,EAAmBE,GAIvB,OAFAK,IAEO,WACHL,EAASM,oBAAoB,QAASL,GACtCD,EAASO,WAEf,IAGE,qCACI,cAACG,EAAD,CAAUb,gBAAiBA,IAC3B,cAACc,EAAD,CAAoBd,gBAAiBA,QAK3Ca,EAA0D,SAAC,GAAuB,IAAtBb,EAAqB,EAArBA,gBAAqB,EAEnDD,mBAAiC,IAFkB,mBAE5EgB,EAF4E,KAElEC,EAFkE,KAqBnF,OAjBAd,qBAAW,WAEP,IAAMe,EAAiB,SAACC,GACpB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GACT,MAAM,GAAN,mBAAWA,GAAX,YAA4BJ,QAOpC,OAHe,OAAfnB,QAAe,IAAfA,KAAiBY,iBAAiB,UAAWK,GAGtC,WACY,OAAfjB,QAAe,IAAfA,KAAiBS,oBAAoB,UAAUQ,MAEpD,CAACjB,IAGA,qBAAKwB,MAAO,CAACC,OAAQ,QAASC,UAAW,UAAzC,SACKX,EAASY,KAAI,SAACC,EAA0BC,GAA3B,OAAqC,cAACC,EAAD,CAAqBF,QAASA,GAAhBC,SAMvEC,EAAgD,SAAC,GAAe,IAAdF,EAAa,EAAbA,QAEpD,OACI,gCACI,qBAAKG,IAAKH,EAAQI,MAAOR,MAAO,CAAES,MAAO,UAD7C,IACwD,4BAAIL,EAAQM,WAChE,uBACCN,EAAQA,QACT,2BAMNd,EAAmE,SAAC,GAAuB,IAAtBd,EAAqB,EAArBA,gBAAqB,EAElED,mBAAS,IAFyD,mBAEzF6B,EAFyF,KAEhFO,EAFgF,OAGhEpC,mBAA8B,WAHkC,mBAGzFqC,EAHyF,KAG/EC,EAH+E,KAKhGnC,qBAAU,WAEN,IAAMoC,EAAc,WAChBD,EAAY,UAKhB,OAFe,OAAfrC,QAAe,IAAfA,KAAiBY,iBAAiB,OAAQ0B,GAEnC,WACY,OAAftC,QAAe,IAAfA,KAAiBS,oBAAoB,OAAO6B,MAEjD,CAACtC,IAUA,OACI,mCACI,gCACI,0BAAUuC,SAAU,SAACrB,GAAD,OAAOiB,EAAWjB,EAAEsB,OAAOC,QAAQA,MAAOb,IAC9D,wBAAQc,SAA8B,OAApB1C,GAAyC,YAAboC,EAAwBO,QAZlE,WACZf,IAGW,OAAf5B,QAAe,IAAfA,KAAiB4C,KAAKhB,GACtBO,EAAW,MAOC,wBAMDU,UA9HY,WAEvB,OAAO,mCACP,cAAC/C,EAAD","file":"static/js/5.98f6ff1e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nexport type ChatMessageType =  {\r\n    message: string\r\n    photo:  string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return(<>\r\n    <Chat/>\r\n    </>\r\n    )\r\n}\r\n\r\nconst Chat:React.FC = () => {\r\n    const [webSocketChanel, setWebSocketChanel] = useState<WebSocket | null>(null)\r\n    \r\n    useEffect(()=>{\r\n        //during firs render creat web socket chanel and save it inside state\r\n        let wsChanel: WebSocket\r\n\r\n        //reconnect function, if chanel will close try to reconect every 3 sec\r\n        const closeHandler = () => {\r\n            console.log('WS closed')\r\n            setTimeout(createWsChanel, 3000)\r\n        }\r\n\r\n        //create WebSocket Chanel function\r\n        function createWsChanel () {\r\n            //remove event listener and close chanel in get new wsChanel\r\n            wsChanel?.removeEventListener('close', closeHandler)\r\n            wsChanel?.close()\r\n            //make new ws chanel and add event listener for close event\r\n            wsChanel = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            wsChanel.addEventListener ('close', closeHandler)\r\n            //set wsChanel into local state\r\n            setWebSocketChanel(wsChanel)\r\n        }\r\n        createWsChanel();\r\n        //clean up event listener\r\n        return () => {\r\n            wsChanel.removeEventListener('close', closeHandler)\r\n            wsChanel.close()\r\n        }\r\n    },[])\r\n\r\n    return(\r\n        <>\r\n            <Messages webSocketChanel={webSocketChanel}/>\r\n            <AddMessageFormChat webSocketChanel={webSocketChanel}/>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC<{webSocketChanel: WebSocket | null}> = ({webSocketChanel}) => {\r\n\r\n    const [messages, setMessages] = useState<Array<ChatMessageType>>([])\r\n\r\n    useEffect( () => {\r\n        //handle for ws message event listener\r\n        const messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => { //set previous and new messages into local state\r\n                return [...prevMessages, ...newMessages]\r\n            })\r\n        }\r\n        //subscribe event message os wer socket chanel \r\n        webSocketChanel?.addEventListener('message', messageHandler)\r\n\r\n        //clean up subscription\r\n        return () => {\r\n            webSocketChanel?.removeEventListener('message',messageHandler)\r\n        }\r\n    }, [webSocketChanel])\r\n\r\n    return(\r\n        <div style={{height: \"500px\", overflowY: \"scroll\"}} >\r\n            {messages.map((message: ChatMessageType, index) => <Message key={index} message={message}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\n//Message component\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n\r\n    return(\r\n        <div>\r\n            <img src={message.photo} style={{ width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//AddMessageFormChat component\r\nconst AddMessageFormChat:React.FC<{webSocketChanel: WebSocket | null}> = ({webSocketChanel}) => {\r\n\r\nconst [message, setMessage] = useState('')\r\nconst [wsStatus, setWsStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\nuseEffect(() =>{\r\n    //make handle for open ws event\r\n    const openHandler = (): void => {\r\n        setWsStatus(\"ready\")\r\n    }\r\n    //subscribe open ws event\r\n    webSocketChanel?.addEventListener('open', openHandler)\r\n    //clean up subscription\r\n    return () => {\r\n        webSocketChanel?.removeEventListener('open',openHandler)\r\n    }\r\n}, [webSocketChanel])\r\n\r\nconst sendMessage = () => {\r\n    if(!message){\r\n        return;\r\n    }\r\n    webSocketChanel?.send(message)\r\n    setMessage('')\r\n}\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.target.value)} value={message}></textarea>\r\n                <button disabled={webSocketChanel === null || wsStatus === 'pending'} onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatPage;"],"sourceRoot":""}