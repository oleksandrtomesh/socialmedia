{"version":3,"sources":["components/ChatPage/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","container","direction","spacing","item","square","Messages","AddMessageFormChat","React","memo","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","style","overflowY","height","padding","map","message","Message","id","ref","src","photo","avatar","width","marginRight","alt","userName","formik","useFormik","initialValues","onSubmit","values","setSubmitting","resetForm","sendMessage","handleSubmit","xs","sm","fullWidth","variant","size","name","label","value","onChange","handleChange","disabled","isSubmitting","withAuthRedirect"],"mappings":"wOAmBMA,EAAgB,WAClB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKH,UAS9D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEf,IAEM,gCACY,UAAXN,GAAsB,8EACvB,eAAC,IAAD,CAAMO,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAAC,IAAD,CAAMC,MAAI,EAAV,SACI,cAAC,IAAD,CAAOC,QAAM,EAAb,SACI,cAACC,EAAD,QAGR,cAAC,IAAD,CAAMF,MAAI,EAAV,SACI,cAACG,EAAD,aAOdD,EAAqBE,IAAMC,MAAK,WAElC,IAAMC,EAAWf,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKa,YAC3DC,EAAoBC,iBAAuB,MAHT,EAIAC,oBAAkB,GAJlB,mBAIjCC,EAJiC,KAInBC,EAJmB,KA0BxC,OARAjB,qBAAU,WACY,IAAD,EAAbgB,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAG3D,CAACR,IAIC,sBAAKS,SAnBa,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Eb,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAiB,IAcPa,MAAO,CAACC,UAAW,SAASC,OAAQ,QAASC,QAAS,iBAApF,UACKrB,EAASsB,KAAI,SAACC,GAAD,OAA8B,cAACC,EAAD,CAA0BD,QAASA,GAArBA,EAAQE,OAClE,qBAAKC,IAAKzB,UAMhBuB,EAAgD1B,IAAMC,MAAK,YAAgB,IAAdwB,EAAa,EAAbA,QAC/D,OACI,gCACI,qBAAKI,IAAKJ,EAAQK,MAAQL,EAAQK,MAAOC,IAAQX,MAAO,CAAEY,MAAO,OAAQC,YAAa,QAASC,IAAI,qBACnG,4BAAIT,EAAQU,WACZ,uBACA,cAAC,IAAD,UACKV,EAAQA,UAEb,6BAMN1B,EAA8B,WAEpC,IAAMb,EAASC,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKH,UAWxDkD,EAASC,YAAU,CACrBC,cAAe,CACXb,QAAS,IAEbc,SAbuB,SAACC,EAAD,GAAqF,IAA5DC,EAA2D,EAA3DA,cAAeC,EAA4C,EAA5CA,UAC3DF,IAGJG,YAAYH,EAAOf,SACnBiB,EAAU,IACVD,GAAc,OAYd,OACI,cAAC,IAAD,CAAO5C,QAAM,EAACuB,MAAO,CAACG,QAAS,QAA/B,SACI,sBAAMgB,SAAUH,EAAOQ,aAAvB,SACI,eAAC,IAAD,CAAMnD,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACI,cAAC,IAAD,CAAMC,MAAI,EAACiD,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC,IAAD,CACIC,WAAS,EACTC,QAAQ,WACRC,KAAK,QACLtB,GAAG,UACHuB,KAAK,UACLC,MAAM,oBACNC,MAAOhB,EAAOI,OAAOf,QACrB4B,SAAUjB,EAAOkB,iBAGzB,cAAC,IAAD,CAAM1D,MAAI,EAACiD,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC,IAAD,CAAcS,SAAqB,UAAXrE,GAAsBkD,EAAOoB,aAArD,4BAUTC,uBAtIY,WAEvB,OAAO,mCACP,cAAC1E,EAAD","file":"static/js/6.849baab5.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport withAuthRedirect from '../../HightOrderComponent(hoc)/withAuthRedirect'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport avatar from '../../assets/images/avatar.png';\r\nimport { Grid, makeStyles, Paper, TextField, Typography } from '@material-ui/core'\r\nimport { FormikHelpers, useFormik } from 'formik'\r\nimport { CustomButton } from '../commonElements/CustomButton'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return(<>\r\n    <Chat/>\r\n    </>\r\n    )\r\n}\r\n\r\nconst Chat:React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType)=> state.chat.status)\r\n\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        } \r\n    },[])\r\n\r\n    return (<div>\r\n            {status === 'error' && <div>Some error ocurred. Please refresh tha page</div>}\r\n            <Grid container direction='column' spacing={2} >\r\n                <Grid item>\r\n                    <Paper square>\r\n                        <Messages />\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item>\r\n                    <AddMessageFormChat />\r\n                </Grid>\r\n            </Grid>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = React.memo(() => {\r\n\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)  \r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n\r\n    //do auto-scroll if user only near the bottom or at the \r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 500) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll (false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll){\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[messages])\r\n\r\n    \r\n    return(\r\n        <div onScroll={scrollHandler} style={{overflowY: \"scroll\",height: \"500px\", padding: '1rem 0 0 1rem'}}>\r\n            {messages.map((message: ChatMessageType) => <Message key={message.id} message={message}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//Message component\r\nconst Message: React.FC<{message: ChatMessageType}> = React.memo(({message}) => {\r\n    return(\r\n        <div>\r\n            <img src={message.photo ? message.photo: avatar} style={{ width: '30px', marginRight: '1rem'}} alt='user chat avatar'/> \r\n            <b>{message.userName}</b>\r\n            <br/>\r\n            <Typography>\r\n                {message.message}\r\n            </Typography>\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\n//AddMessageFormChat component\r\nconst AddMessageFormChat:React.FC = () => {\r\n\r\nconst status = useSelector((state: AppStateType)=> state.chat.status)\r\n\r\nconst sendMessageHandler = (values:  FormikValues, {setSubmitting, resetForm}: FormikHelpers<FormikValues>) => {\r\n    if(!values){\r\n        return;\r\n    }\r\n    sendMessage(values.message)\r\n    resetForm({})\r\n    setSubmitting(false)\r\n}\r\n\r\nconst formik = useFormik({\r\n    initialValues: {\r\n        message: '',\r\n    },\r\n    onSubmit: sendMessageHandler\r\n});\r\n\r\n\r\n\r\n    return(\r\n        <Paper square style={{padding: '1rem'}}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container direction='row' spacing={2}>\r\n                    <Grid item xs={12} sm={9}>\r\n                        <TextField\r\n                            fullWidth\r\n                            variant='outlined'\r\n                            size='small'\r\n                            id=\"message\"\r\n                            name=\"message\"\r\n                            label=\"Type your message\"\r\n                            value={formik.values.message}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <CustomButton disabled={status !== 'ready' || formik.isSubmitting}>\r\n                            Send\r\n                        </CustomButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(ChatPage)\r\n\r\ntype FormikValues = {\r\n    message: string\r\n}\r\n\r\nexport type ChatMessageType =  {\r\n    id: string\r\n    message: string\r\n    photo:  string\r\n    userId: number\r\n    userName: string\r\n}"],"sourceRoot":""}